create table
  public.bird (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone null default now(),
    band_num text null,
    owner_id bigint null,
    male boolean null,
    date_of_birth date null,
    date_of_death date null,
    nick text null,
    notes text null,
    father_id bigint null,
    mother_id bigint null,
    updated_at timestamp with time zone not null default now(),
    constraint bird_pkey primary key (id),
    constraint bird_father_id_fkey foreign key (father_id) references bird (id) on delete set null,
    constraint bird_mother_id_fkey foreign key (mother_id) references bird (id) on delete set null
  ) tablespace pg_default;

create trigger handle_updated_at before
update on bird for each row
execute function moddatetime ('updated_at');

-- TODO: show table
-- TODO: class table?
-- TODO: result joins onto show instead of having its own prestige info

create table
  public.result (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone null,
    bird_id bigint not null,
    date timestamp with time zone null,
    prestige real not null,
    percentile real not null,
    position bigint null,
    out_of bigint null,
    notes text null,
    constraint result_pkey primary key (id)
  ) tablespace pg_default;


create or replace function ancestors(id int, depth int)
    returns table (
        id int,
        band_num text,
        nick text,
        father_id int,
        mother_id int,
        depth int)
as $$
    with recursive ancestors as (
        select
            id,
            band_num,
            nick,
            father_id,
            mother_id,
            0 as depth
        from bird
        where id = $1
        union
        select
            b.id,
            b.band_num,
            b.nick,
            b.father_id,
            b.mother_id,
            a.depth + 1 as depth
        from bird b
        inner join ancestors a
            on a.mother_id = b.id
            or a.father_id = b.id
        where a.depth < $2
    )
    select * from ancestors;
$$ language sql;

create or replace function children(id int)
    returns table (
        id int,
        band_num text,
        nick text,
        father_id int,
        mother_id int,
        depth int)
as $$
    with parent as (
        select
            b.male
        from bird b
        where b.id = $1
    )
    select
        b.id,
        b.band_num,
        b.nick,
        b.father_id,
        b.mother_id,
        1 as depth
    from bird b
    inner join parent p
        on (p.male and b.father_id = $1)
        or (not p.male and b.mother_id = $1);
$$ language sql;
